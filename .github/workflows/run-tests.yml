name: Run unit and integration tests

on:
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-22.04
    env:
      TEST_DATABASE_HOST: '127.0.0.1'
      TEST_DATABASE_PORT: '8888'
      TEST_DATABASE_NAME: integration_test
      TEST_DATABASE_USER: root
      TEST_DATABASE_PASSWORD: password
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: integration_test
        ports:
          - '8888:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
    steps:

    - name: Checkout EspoCRM
      uses: actions/checkout@v4
      with:
        repository: espocrm/espocrm
        ref: '8.0.2'

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 16.x

    - name: Setup PHP with Composer
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer:v2
        ini-values: memory_limit=1024M

    - name: Start MySQL service
      run: sudo systemctl start mysql

    - name: Create DB table
      run: mysql -h 127.0.0.1 --port 8888 -u root -ppassword -e 'CREATE DATABASE IF NOT EXISTS integration_test;'

    - name: Write internal config file
      run: |
        cat <<EOF > ./data/config-internal.php
        <?php
        return [ 
          'database' => [ 
            'host' => '127.0.0.1',
            'port' => '8888',
            'dbname' => 'integration_test',
            'user' => 'root',
            'password' => 'password'
          ]
        ];
        EOF

    - name: Write config file
      run: |
        cat <<EOF > ./data/config.php
        <?php
        return [
          'version' => '8.0.2',
          'defaultCurrency' => 'USD',
          'baseCurrency' => 'USD',
        ];
        EOF
        cat ./data/config.php

    - name: NPM install
      run: npm install

    - name: Build
      run: grunt test

    - name: Rebuild
      run: php rebuild.php

    - name: Checkout customisations
      uses: actions/checkout@v4
      with:
        path: './cva_de_duplication_extension'

    - name: Create the extension zip
      run: |
        cd cva_de_duplication_extension
        zip -r ../cva_de_duplication_extension.zip ./*
        cd ../
        rm -r ./cva_de_duplication_extension/

    - name: Install the extension
      run: |
        php command.php extension --file="./cva_de_duplication_extension.zip"

    - name: Static analysis
      run: vendor/bin/phpstan

    - name: Unit testing
      run: vendor/bin/phpunit tests/unit

    - name: Integration testing
      run: vendor/bin/phpunit tests/integration